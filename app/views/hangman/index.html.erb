<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Hangman Game</title>
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-100 font-sans text-center">
    <h1 class="text-4xl font-bold mt-8">Hangman Game</h1>
    <div class="w-full max-w-xl mx-auto mt-8 p-6 bg-white rounded-lg shadow-lg flex flex-col items-center">
        <canvas id="hangmanCanvas" class="border-2 border-gray-400 bg-gray-50 rounded mb-6" width="400" height="400"></canvas>
        <div class="word-display text-3xl tracking-widest font-mono mb-4" id="wordDisplay">_ _ _ _ _ _</div>
        <div class="chances text-lg text-gray-700 mb-2" id="chancesLeft">Chances Left: 6</div>
        <div class="game-message text-xl font-bold mb-4" id="gameMessage"></div>
        <div class="guess-input flex items-center gap-2 mb-4">
            <label for="letterInput" class="mr-2 font-semibold">Enter a letter:</label>
            <input type="text" id="letterInput" maxlength="1" class="border rounded px-2 py-1 w-16 text-center focus:outline-none focus:ring-2 focus:ring-green-400">
            <button onclick="submitGuess()" class="bg-green-500 hover:bg-green-600 text-white font-bold py-1 px-4 rounded transition">Guess</button>
        </div>
    </div>
    <audio id="winSound" src="win.mp3"></audio>
    <audio id="loseSound" src="lose.mp3"></audio>
    <script>
        let wrongGuesses = 0;
        let correctGuesses = 0;
        let word = [];
        let guessedLetters = new Set();
        const canvas = document.getElementById("hangmanCanvas");
        const ctx = canvas.getContext("2d");

        function drawHangman() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            ctx.lineWidth = 2;
            ctx.strokeStyle = "black";

            // Always draw scaffold at game start
            ctx.beginPath(); ctx.moveTo(50, 350); ctx.lineTo(200, 350); ctx.stroke(); // Base
            ctx.beginPath(); ctx.moveTo(125, 350); ctx.lineTo(125, 50); ctx.stroke(); // Pole
            ctx.beginPath(); ctx.moveTo(125, 50); ctx.lineTo(250, 50); ctx.stroke(); // Beam
            ctx.beginPath(); ctx.moveTo(250, 50); ctx.lineTo(250, 100); ctx.stroke(); // Rope

            // Stick figure parts
            if (wrongGuesses > 0) { ctx.beginPath(); ctx.arc(250, 125, 25, 0, Math.PI * 2); ctx.stroke(); } // Head
            if (wrongGuesses > 1) { ctx.moveTo(250, 150); ctx.lineTo(250, 230); ctx.stroke(); } // Body
            if (wrongGuesses > 2) { ctx.moveTo(250, 170); ctx.lineTo(220, 210); ctx.stroke(); } // Left Arm
            if (wrongGuesses > 3) { ctx.moveTo(250, 170); ctx.lineTo(280, 210); ctx.stroke(); } // Right Arm
            if (wrongGuesses > 4) { ctx.moveTo(250, 230); ctx.lineTo(220, 270); ctx.stroke(); } // Left Leg
            if (wrongGuesses > 5) { ctx.moveTo(250, 230); ctx.lineTo(280, 270); ctx.stroke(); } // Right Leg
        }

        async function fetchRandomWord() {
            try {
                console.log("Fetching random word...");
                let response = await fetch('https://random-word-api.herokuapp.com/word?number=1&lang=en');
                let data = await response.json();
                console.log("API Response:", data);
                
                if (Array.isArray(data) && data.length > 0 && typeof data[0] === 'string') {
                    word = data[0].toUpperCase().split("");
                    console.log("Fetched word:", word.join("")); // âœ… LOGGING THE FETCHED WORD
                } else {
                    throw new Error("Invalid API response");
                }
            } catch (error) {
                console.error("Error fetching random word:", error);
                word = "HANGMAN".split(""); // Fallback word
            }
            updateWordDisplay();
            drawHangman();
        }

        function updateWordDisplay() {
            document.getElementById("wordDisplay").innerText = word.map(letter => guessedLetters.has(letter) ? letter : "_").join(" ");
        }

        function submitGuess() {
            const letterInput = document.getElementById("letterInput");
            const letter = letterInput.value.toUpperCase();
            letterInput.value = "";
            
            if (!letter.match(/^[A-Z]$/) || guessedLetters.has(letter)) {
                console.log("Invalid or duplicate letter guessed:", letter);
                return;
            }
            guessedLetters.add(letter);
            
            if (!word.includes(letter)) {
                wrongGuesses++;
                document.getElementById("chancesLeft").innerText = "Chances Left: " + (6 - wrongGuesses);
                drawHangman();
                if (wrongGuesses >= 6) {
                    document.getElementById("gameMessage").innerText = "Game Over! You Lost!";
                    document.getElementById("loseSound").play();
                }
            } else {
                updateWordDisplay();
                if (!document.getElementById("wordDisplay").innerText.includes("_")) {
                    document.getElementById("gameMessage").innerText = "Congratulations! You Won!";
                    document.getElementById("gameMessage").classList.add("success");
                    document.getElementById("winSound").play();
                }
            }
        }
        fetchRandomWord();
    </script>
</body>
</html>
